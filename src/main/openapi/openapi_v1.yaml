openapi: 3.0.2
info:
  version: 'v1'
  title: '${project.name}'
  description: |
    ${project.description}
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '/${project.artifactId}/v1'
    description: 'Version 1'

paths:
  /ping:
    get:
      tags:
        - '${project.name}'
      summary: 'Ping the server to check if the server is reachable.'
      operationId: ping
      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

  /status:
    get:
      tags:
        - '${project.name}'
      summary: 'Retrieve status for the well being of the server, with granularity determined by role.'
      operationId: status
      security:
        - KBOAuth:
          - public
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string

  /probe/read:
    get:
      tags:
        - '${project.name}'
      summary: 'OAuth2 check: If and only if the user belongs to the group "read" the service will answer "OK"'
      operationId: probeRead
      security:
        - KBOAuth:
          - read
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
                example: 'OK'

  /probe/write:
    get:
      tags:
        - '${project.name}'
      summary: 'OAuth2 check: If and only if the user belongs to the group "write" the service will answer "OK"'
      operationId: probeWrite
      security:
        - KBOAuth:
          - write
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
                example: 'OK'

  /probe/any:
    get:
      tags:
        - '${project.name}'
      summary: 'OAuth2 check: If and only if the user has at least one group (any group will work) the service will answer "OK"'
      operationId: probeAny
      security:
        - KBOAuth:
          - any
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
                example: 'OK'

  /probe/whoami:
    get:
      tags:
        - '${project.name}'
      summary: 'OAuth2 check: The groups that the caller belongs to or "N/A" is there are no groups'
      operationId: probeWhoami
      security:
        - KBOAuth:
          - public
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
                example: '[read, write]]'

  /bookcount:
    get:
      tags:
        - '${project.name}'
      summary: 'Retrieve the number of books. Requires authorization as it is secret and the result relies in complex internal need-to-know-basis rules'
      operationId: getBookCount
      security:
        - KBOAuth:
          - any
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string

  # A demonstration of using the same API endpoint for retrieval, deletion and addition/update
  # This is more or less a mirror of /pet in https://petstore3.swagger.io/
  /book/{id}:
    get:
      tags:
        - '${project.name}'
      summary: 'Retrieves metadata for a single book'
      operationId: getBook
      parameters:
        - name: id
          in: path
          description: 'The ID for the book to retrieve'
          required: true
          schema:
            type: string
            # Note: Constraints are not enforced by Swagger. They are only used as a contract
            minLength: 1
            example: 'book_id87'
      security:
        - KBOAuth:
          - read
      responses:
        '200':
          description: 'JSON-compliant representation of the Book.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: 'Not found'
          content:
            text/plain:
              schema:
                type: string
                example: "HTTP 404: Not Found"
    delete:
      tags:
        - '${project.name}'
      summary: 'Deletes metadata for a single book'
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          description: 'The ID for the book to delete'
          required: true
          schema:
            type: string
            # Note: Constraints are not enforced by Swagger. They are only used as a contract
            minLength: 1
            example: 'book_id87'
      security:
        - KBOAuth:
          - write
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
                example: 'Metadata for book "book_id87" was successfully deleted'
        '404':
          description: 'Not found'
          content:
            text/plain:
              schema:
                type: string
                example: "HTTP 404: Not Found"
        '403':
          description: 'Forbidden'
          content:
            text/plain:
              schema:
                type: string
                example: "HTTP 403: Forbidden"


  /book:
    post:
      tags:
        - '${project.name}'
      summary: 'Add or update a single book'
      operationId: addBook
      security:
        - KBOAuth:
          - write
      responses:
         '200':
           description: 'If the book was added successfully'
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Book'
      requestBody:
         description: 'Add or update a single book'
         required: true
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Book'
           application/xml:
             schema:
               $ref: '#/components/schemas/Book'
           application/x-www-form-urlencoded:
             schema:
               $ref: '#/components/schemas/Book'

  # A demonstration of streaming delivery of arbitrary size
  # Also demonstrates different delivery formats (CVS, JSON, JSON-Lines)
  /books:
    get:
      tags:
        - '${project.name}'
      summary: 'Delivers metadata on books'
      operationId: getBooks
      # We assume a very large response here: Too large for showing directly in the Swagger UI.
      # The Content-Disposition for "x-streamingOutput: true" is set to disable inline display in Swagger UI, but
      # keep inline display when the link is pasted directly in a browser. Inspect the generated code for tweaks.
      x-streamingOutput: true
      parameters:
        - name: query
          in: query
          description: 'Search query for the books'
          required: false
          schema:
            type: string
            # Note: Constraints are not enforced by Swagger. They are only used as a contract
            minLength: 1
            example: 'horses OR cows'
        - name: max
          in: query
          description: 'The maximum number of books to return'
          required: false
          schema:
            type: integer
            format: int64
            minimum: 0
            example: 87
        - name: format
          in: query
          required: false
          description: |
            The delivery format. This can also be specified using headers, as seen in the Responses section.
            If both headers and format are specified, format takes precedence.

            * JSONL: Newline separated single-line JSON representations of Documents
            * JSON: Valid JSON in the form of a single array of Documents
            * CSV: Comma separated, missing values represented with nothing, strings encapsulated in quotes
          schema:
            type: string
            enum:  ['JSONL', 'JSON', 'CSV']
            example: 'JSONL'
      security:
        - KBOAuth:
          - read
      responses:
        '200':
          description: 'OK'
          content:
            # application/x-jsonlines is another possibility. Potayto, potahto
            application/x-ndjson:
              schema:
                description: 'Newline separated single-line JSON representations of Books.\n
                              See https://github.com/ndjson/ndjson-spec or https://jsonlines.org/ for the format'
                type: string
            application/json:
              schema:
                description: 'JSON-compliant representation of Books. Note that the structure can be unwieldy for
                              large exports. Consider using application/x-ndjson instead'
                type: array
                items:
                  $ref: '#/components/schemas/Book'
            text/csv:
              schema:
                description: 'Comma Separated Values, with strings quoted and newline as the string'
                type: string
        '400':
          description: 'Bad request'

components:

  securitySchemes:

    KBOAuth:
      type: oauth2
      description: 'This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)'
      flows:
        implicit:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          authorizationUrl: https://api.example.com/oauth2/authorize # Overridden by the configuration
          scopes:
            # Project specific roles
            read: 'read data'
            write: 'modify or delete data'

            # General roles at the Royal Danish Library
            devel: 'broad read access'
            admin: 'all rights'

            # Meta role controlling authorization behaviour
            public: 'allowed for all, authorization optional, implementation behaviour depending on caller roles'
            any: 'allowed for all, authorization mandatory, implementation behaviour depending on caller roles'

  schemas:

    Book:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: string
          description: 'Book ID'
          example: 'book_bookid87'
        title:
          type: string
          description: 'Book title'
          example: 'Disappeared by the Storm'
        pages:
          type: integer
          format: int32
          example: 43

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
