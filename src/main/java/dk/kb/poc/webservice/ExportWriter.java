/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
package dk.kb.poc.webservice;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import io.swagger.jackson.mixin.ResponseSchemaMixin;
import io.swagger.models.Response;
import io.swagger.util.DeserializationModule;
import io.swagger.util.Json;
import io.swagger.util.ReferenceSerializationConfigurer;

import javax.ws.rs.core.StreamingOutput;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.charset.StandardCharsets;

/**
 * Streaming export oriented Writer, acting as a base for serialising Jackson annotated classes such as the
 * ones generated by OpenAPI. The method {@link #write(Object)} is normally the only write method that should be called.
 *
 * Wraps all methods from {@link Writer} and converts all checked Exceptions to {@link RuntimeException}s to make it
 * usable with Java streams.
 */
public abstract class ExportWriter extends Writer {

    private final Writer inner;

    /**
     * Wraps the given Writer directly.
     * @param inner the inner Writer.
     */
    public ExportWriter(Writer inner) {
        this.inner = inner;
    }

    /**
     * Wraps the given OutputStream in an {@link OutputStreamWriter} encoding as UTF-8.
     * @param inner an outputstream, e.g. delivered by {@link StreamingOutput#write(OutputStream)}.
     */
    public ExportWriter(OutputStream inner) {
        this.inner = new OutputStreamWriter(inner, StandardCharsets.UTF_8);
    }

    /**
     * Write a Jackson annotated Object to the stream.
     * @param annotatedObject a Jackson annotated Object.
     */
    public abstract void write(Object annotatedObject);

    /**
     * The method {@link Json#mapper()} reuses the mapper instance which is a problem when adjusting the settings
     * for the mapper. This method creates independent mappers.
     * @return a mapper independent from other mappers.
     */
    public static ObjectMapper createMapper() {
        // Taken near verbatim from ObjectMapperFactory
        ObjectMapper mapper = new ObjectMapper();

        Module deserializerModule = new DeserializationModule(true, true);
        mapper.registerModule(deserializerModule);
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

        mapper.addMixIn(Response.class, ResponseSchemaMixin.class);

        ReferenceSerializationConfigurer.serializeAsComputedRef(mapper);

        return mapper;
    }

    /* Delegates below */

    @Override
    public void write(int c) {
        try {
            inner.write(c);
        } catch (IOException e) {
            throw new RuntimeException("IOException while writing " + c, e);
        }
    }

    @Override
    public void write(char[] cbuf) {
        try {
            inner.write(cbuf);
        } catch (IOException e) {
            throw new RuntimeException("IOException writing to buffer", e);
        }
    }

    @Override
    public void write(char[] cbuf, int off, int len) {
        try {
            inner.write(cbuf, off, len);
        } catch (IOException e) {
            throw new RuntimeException("IOException writing to buffer", e);
        }
    }

    @Override
    public void write(String str) {
        try {
            inner.write(str);
        } catch (IOException e) {
            throw new RuntimeException("IOException writing String", e);
        }
    }

    @Override
    public void write(String str, int off, int len) {
        try {
            inner.write(str, off, len);
        } catch (IOException e) {
            throw new RuntimeException("IOException writing String buffer", e);
        }
    }

    @Override
    public Writer append(CharSequence csq) {
        try {
            return inner.append(csq);
        } catch (IOException e) {
            throw new RuntimeException("IOException writing CharSequence", e);
        }
    }

    @Override
    public Writer append(CharSequence csq, int start, int end) {
        try {
            return inner.append(csq, start, end);
        } catch (IOException e) {
            throw new RuntimeException("IOException writing CharSequence", e);
        }
    }

    @Override
    public Writer append(char c) {
        try {
            return inner.append(c);
        } catch (IOException e) {
            throw new RuntimeException("IOException writing char " + c, e);
        }
    }

    @Override
    public void flush() {
        try {
            inner.flush();
        } catch (IOException e) {
            throw new RuntimeException("IOException flushing", e);
        }
    }

    @Override
    public void close() {
        try {
            inner.close();
        } catch (IOException e) {
            throw new RuntimeException("IOException closing", e);
        }
    }

}
